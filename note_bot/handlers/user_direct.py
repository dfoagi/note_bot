import os
from datetime import datetime

from aiogram import types, F, Router, Bot
from aiogram.filters import StateFilter
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from dotenv import load_dotenv

from note_bot.exceptions import RoundToFiveException
from note_bot.filters.check_admin import IsAdmin
from note_bot.keyboards.topic_choose_kbds import (
    choose_topic_kbd,
    make_catalogue,
    topic_kbd,
    change_kbd,
    menu_kbd,
    last_check_kbd,
    settings_kbd
)
from note_bot.keyboards.user_kbds import start_kbd, make_event_catalogue, event_book_kbd, event_unbook_kbd, back_kbd
from note_bot.keyboards.adm_kbds import admin_main_menu_kbd
from note_bot.models import (
    create_topic_list,
    change_user_subscription,
    get_topic_by_title,
    check_booking,
    check_registration,
    register_user,
    register_answers,
    change_subscription_time,
    cancel_subscription,
    get_event,
    add_booking,
    delete_booking,
    get_user_time_topic
)
from note_bot.state.user_states import TopicChoose, Registration, BookingEvent

load_dotenv()

user_direct_router = Router()
admins = os.getenv('ADMINS').split(',')

API_TOKEN = os.getenv('TOKEN')
bot: Bot = Bot(token=API_TOKEN)


@user_direct_router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    if check_registration(message.chat.id):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
            reply_markup=start_kbd
        )
    else:
        await message.answer(
            f"<b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –û–ª—è –ö–∞–ø—Ä–∞—Å –∏ –º–æ–π —É—é—Ç–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –∑–∞–ø–∏—Å–µ–π.</b> \n\n"
            f"–Ø –∑–Ω–∞—é, –∫–∞–∫ —Å–ª–æ–∂–Ω–æ –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å, –Ω–æ –≤–µ–¥—å –ø–∏—Å–∞—Ç—å ‚Äî —ç—Ç–æ —Ç–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, "
            f"—á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã –≥–ª—É–±–∂–µ. –ü–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –±–æ—Ç –∑–¥–µ—Å—å, "
            f"—á—Ç–æ–±—ã –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–µ–≥—á–∏—Ç—å –ø—É—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ. \n\n"
            f"<b>–ß—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç:</b>\n\n"
            f"- –í —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É."
            f"- –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è (–≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)."
            f"- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.\n\n"
            f"–ù–æ —Å–Ω–∞—á–∞–ª–∞ —É –º–µ–Ω—è –µ—Å—Ç—å –ø–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ –ª–∏—á–Ω—ã–º.\n\n"
            f"–ò –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö ‚Äî –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? :)",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Registration.name)


@user_direct_router.message(Command("help"))
@user_direct_router.message(F.text.lower() == "–ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
async def cmd_help(message: types.Message):
    await message.answer(
        "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?\n\n"
        "- –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ¬´–í–æ–ø—Ä–æ—Å –¥–Ω—è¬ª ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –∑–∞–ø–∏—Å–µ–π.\n"
        "- –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –≤ ¬´–ö–∞—Ç–∞–ª–æ–≥–µ —Ç–µ–º¬ª –∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏.\n"
        "- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "- –°–æ–æ–±—â–∞–µ—Ç –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n\n"
        "–í–æ–ø—Ä–æ—Å –¥–Ω—è ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É —á–µ—Ä–µ–∑ ¬´–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–º¬ª –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.\n"
        "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äî —É–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ: @olyakapras",
        reply_markup=menu_kbd
    )


@user_direct_router.message(StateFilter(Registration.name), F.text)
async def register_q1(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    await message.answer(
        f"–ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–æ–ª–Ω—É–µ—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? "
    )

    await state.set_state(Registration.question_1)


@user_direct_router.message(StateFilter(Registration.question_1), F.text)
async def register_q2(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)

    await message.answer(
        f"–ß–µ–º –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω—ã –∑–∞–ø–∏—Å–∏?"
    )

    await state.set_state(Registration.question_2)


@user_direct_router.message(StateFilter(Registration.question_2), F.text)
async def register_name(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    data = await state.get_data()
    register_user(message.from_user.id)
    register_answers(message.from_user.id, message.from_user.username, data['name'], data['q1'], data['q2'])
    await message.answer(
        f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!</b>\n\n"
        f"–û–Ω–∏ –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∑–∞–ø–∏—Å–µ–π."
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ¬ª –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help "
        f"üòä",
        reply_markup=start_kbd
    )
    await state.clear()


'''------------------------------------------–í–´–ë–û–† –¢–ï–ú–´------------------------------------------------------'''


@user_direct_router.message(StateFilter(None), F.text.lower() == "–≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏ –Ω–∞—Å—Ç—Ä–æ–π —Ä–∞—Å—Å—ã–ª–∫—É")
@user_direct_router.message(StateFilter(TopicChoose.catalogue), F.text.lower() == "–Ω–∞–∑–∞–¥")
@user_direct_router.message(StateFilter(TopicChoose.settings), F.text.lower() == "–Ω–∞–∑–∞–¥")
async def choose_topic(message: types.Message, state: FSMContext):
    time, topic, progress = get_user_time_topic(message.from_user.id)
    if time is not None:
        await state.update_data(time=time)
    if topic != 0:
        await state.update_data(cur_topic=topic, progress=progress)
        await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ–º—É {topic}\n"
                             f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress[0]}/{progress[1]} –∫–∞—Ä—Ç–æ—á–µ–∫")
    await message.answer(
        "–í—ã–±–æ—Ä —Ç–µ–º—ã:",
        reply_markup=choose_topic_kbd
    )
    await state.set_state(TopicChoose.menu)


#–í –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –∞–π–ø–∞–¥–µ
# –ø–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Ç–µ–º –∏–∑ –º–µ–Ω—é –∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–∑–∞–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
@user_direct_router.message(StateFilter(TopicChoose.menu), F.text.lower() == "–∫–∞—Ç–∞–ª–æ–≥ —Ç–µ–º")
@user_direct_router.message(StateFilter(TopicChoose.topic), (F.text.lower() == "–Ω–∞–∑–∞–¥") | (F.text.lower() == "–æ—Ç–ª–∏—á–Ω–æ"))
@user_direct_router.message(StateFilter(TopicChoose.change_topic), F.text.lower() == "–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ç–µ–º—É")
async def choose_topic(message: types.Message, state: FSMContext):
    await message.answer(
        "–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–º:",
        reply_markup=make_catalogue()
    )
    await state.set_state(TopicChoose.catalogue)


# todo: –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' —Ä—É–∫–∞–º–∏. –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
# –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω–∞–∑–∞–¥
@user_direct_router.message(StateFilter(TopicChoose.catalogue), F.text.in_(create_topic_list()))
async def topic1(message: types.Message, state: FSMContext):
    topic = get_topic_by_title(message.text)
    data = await state.get_data()
    kbd = change_kbd if 'cur_topic' in data else topic_kbd
    if 'cur_topic' in data and data['cur_topic'] == message.text:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç–µ–º—É")
        kbd = back_kbd

    await state.update_data(topic_title=message.text)
    await message.answer(
        "<b>"+topic.title+"</b>" + "\n" + topic.description,
        reply_markup=kbd
    )
    await state.update_data(chosen_topic_id=topic.id)
    await state.set_state(TopicChoose.topic)


# –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è / –¢–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
@user_direct_router.message(StateFilter(TopicChoose.change_topic), F.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –Ω–∞ –Ω–æ–≤—É—é")
@user_direct_router.message(StateFilter(TopicChoose.topic), F.text.lower() == "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def subscribe(message: types.Message, state: FSMContext):
    data = await state.get_data()
    change_user_subscription(message.chat.id, data['chosen_topic_id'])
    if 'time' not in data:
        await message.answer(
            f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–µ–º—É <i>{data['topic_title']}</i>\n\n"
            "–í —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∞.\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:\n"
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí –í–æ–ø—Ä–æ—Å –¥–Ω—è ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
    else:
        await message.answer(
            f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–µ–º—É <i>{data['topic_title']}</i>\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–¥–µ—Ç –≤–∞–º –≤ {data['time']} –ú–°–ö\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:\n"
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Üí –í–æ–ø—Ä–æ—Å –¥–Ω—è ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
    await cancel(message, state)


# –°–ø—Ä–æ—Å–∏—Ç—å —Ç–æ—á–Ω–æ –ª–∏ —Ö–æ—Ç—è—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
@user_direct_router.message(StateFilter(TopicChoose.topic), F.text.lower() == "–∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
async def ask_if_really_wants(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ–º—É {data['cur_topic']}\n"
        f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å = {data['progress'][0]} / {data['progress'][1]}\n"
        "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –ø–æ–¥–ø–∏—Å–∫–∏?",
        reply_markup=last_check_kbd)
    await state.set_state(TopicChoose.change_topic)


@user_direct_router.message(StateFilter(TopicChoose.menu), F.text.lower() == "–Ω–∞—Å—Ç—Ä–æ–π —Ä–∞—Å—Å—ã–ª–∫—É")
async def settings_menu(message: types.Message, state: FSMContext):
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=settings_kbd)
    await state.set_state(TopicChoose.settings)


@user_direct_router.message(StateFilter(TopicChoose.settings), F.text.lower() == "–≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏")
async def ask_time(message: types.Message, state: FSMContext):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º (–ø–æ –ú–æ—Å–∫–≤–µ), –æ–∫—Ä—É–≥–ª—è—è –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 5 –º–∏–Ω—É—Ç, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 9:00\n\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \"–ù–∞–∑–∞–¥\"",
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(TopicChoose.ask_time)


@user_direct_router.message(StateFilter(TopicChoose.ask_time), F.text.lower() == '–Ω–∞–∑–∞–¥')
async def change_time(message: types.Message, state: FSMContext):
    await cancel(message, state)


@user_direct_router.message(StateFilter(TopicChoose.ask_time), F.text)
async def change_time(message: types.Message, state: FSMContext):
    try:
        new_time = datetime.strptime(message.text, '%H:%M')
        if new_time.minute % 5 != 0:
            raise RoundToFiveException
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! \n–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –¥–æ 5 –º–∏–Ω—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
    except RoundToFiveException:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! \n–û–∫—Ä—É–≥–ª–∏—Ç–µ –º–∏–Ω—É—Ç—ã –¥–æ 5!")
    else:
        change_subscription_time(message.from_user.id, new_time)
        await message.answer(
            "–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ \n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=settings_kbd)
        await state.set_state(TopicChoose.settings)


@user_direct_router.message(StateFilter(TopicChoose.settings), F.text.lower() == "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def pause_subscription(message: types.Message, state: FSMContext):
    if cancel_subscription(message.from_user.id):
        await message.answer(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n"
            "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ –ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–º\n\n"
            )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    await cancel(message, state)


'''----------------------------------------–ó–ê–ü–ò–°–¨ –ù–ê –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ï----------------------------------------------------'''


@user_direct_router.message(StateFilter(None), F.text.lower() == "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
@user_direct_router.message(StateFilter(BookingEvent.event), F.text.lower() == "–Ω–∞–∑–∞–¥")
async def events_list(message: types.Message, state: FSMContext):
    events_number, events_kbd = make_event_catalogue()
    if events_number == 0:
        await message.answer(
            "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—é –∞–Ω–æ–Ω—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!"
        )
    else:
        await message.answer(
            "–í–æ—Ç –≥—Ä—è–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=events_kbd
        )
        await state.set_state(BookingEvent.catalogue)


@user_direct_router.message(StateFilter(BookingEvent.catalogue), F.text)
async def event_about(message: types.Message, state: FSMContext):
    if message.text.lower() == '–Ω–∞–∑–∞–¥':
        await cancel(message, state)
    else:
        event_title, event_date = message.text.split('\n')
        event = get_event(event_title, event_date)
        if event:
            await state.update_data(event_id=event.id, event_title=event.title)
            if check_booking(message.from_user.id, event.id):
                await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {event.title}", reply_markup=event_unbook_kbd)
            else:
                await message.answer(f"–í–æ—Ç —Ç–∞–∫–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ:\n\n"
                                     f"{event_title}\n{event.description}", reply_markup=event_book_kbd)
            await state.set_state(BookingEvent.event)


@user_direct_router.message(StateFilter(BookingEvent.event), F.text.lower() == '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
async def book_event(message: types.Message, state: FSMContext):
    data = await state.get_data()
    add_booking(data['event_id'], message.from_user.id)
    await bot.send_message(chat_id=273537230,
                           text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} "
                                f"–∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {data['event_title']}")
    await message.answer("–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    await events_list(message, state)


@user_direct_router.message(StateFilter(BookingEvent.event), F.text.lower() == '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
async def cancel_booking(message: types.Message, state: FSMContext):
    data = await state.get_data()
    delete_booking(data['event_id'], message.from_user.id)
    await bot.send_message(chat_id=273537230,
                           text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} "
                                f"–æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {data['event_title']}")
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await cancel(message, state)


'''------------------------------------------–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ------------------------------------------------------'''


@user_direct_router.message(Command("main_menu"), IsAdmin())
@user_direct_router.message(F.text.lower() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", IsAdmin())
@user_direct_router.message(StateFilter(None), F.text, IsAdmin())
async def admin_cancel(message: types.Message, state: FSMContext):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=admin_main_menu_kbd
    )
    await state.clear()


#–ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Ñ–∏–ª—å—Ç—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@user_direct_router.message(Command("main_menu"))
@user_direct_router.message(F.text.lower() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@user_direct_router.message(StateFilter(None), F.text)  # –ß—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–ª–æ—Å—å –º–µ–Ω—é
async def cancel(message: types.Message, state: FSMContext):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=menu_kbd
    )
    await state.clear()

# —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–∞–º—è—Ç–∏
# @user_direct_router.message(F.text.lower() == '—Ö–æ—á—É –∫–∞—Ä—Ç–∏–Ω–∫—É')
# async def send_photo(message: types.message):
#     pic_id, tg_id, folder, text = get_pic()
#     if not tg_id:
#         img = FSInputFile(folder)
#         msg = await message.answer_photo(
#             photo=img,
#             caption=text)
#         photo_id = msg.photo[-1].file_id
#         add_tg_id(pic_id, photo_id)
#
#     else:
#         await message.answer_photo(
#             photo=tg_id,
#             caption=text)
